import sys
import os
import re
import shutil
import numpy as np
import xml.etree.ElementTree as ET

import Sci.Fluids
import Sci.Data.Flux_Map

# global constants

dir_home = os.environ['HOME']
dir_mohr = "/nfs/mohr/sva/work/rymalc/bin"

dir_scheme_source = dir_home + "/Documents/Programming/Scheme"

var_def = {
		'GEO_SOLAR_WIDTH':'SOLAR_WIDTH',
		'GEO_SOLAR_LENGTH':'SOLAR_LENGTH'
		}

def prnt(a):
	print a

def print_tree(root,tab = 0):
	text = root.text
	if root.text:
		text = re.sub('[\t\n]','',root.text)
	else:
		text = ''
	print "\t" * tab, root.tag, root.attrib, text
	for child in root:
		#print "\t" * tab, child.tag, child.attrib, re.sub('[\t\n]','',child.text)
		print_tree(child, tab + 1)

def text_to_dir(text):
	number = int(text)
	dir = "x{0:04d}".format(number)
	return dir
def index_to_dir(text):
	dir = "x{0:04d}".format(index)
	return dir


def strip_white(text):
	#print "before: <<<{0}>>>".format(text)
	text = re.sub('^[\t\n ]*','',text)
	text = re.sub('[\t\n ]*$','',text)
	#print "after:  <<<{0}>>>".format(text)
	return text
def process_array(text):
	lines = re.split('\n',text)
	lines = [strip_white(line) for line in lines]
	lines = [line for line in lines if line]

	test = lines[0]
	test = re.split(',',test)
	
	rows = len(lines)
	cols = len(test)
	
	ret = np.zeros((rows,cols))
	
	for line,i in zip(lines,range(rows)):
		#print line
		for e,j in zip(re.split(',', line), range(cols)):
			ret[i,j] = float(e)
	return ret

class Files:
	filenames = []
	
	def get_root(self, path):
		#print "loading '{0}'".format(filename)

		if not os.path.isfile(path):
			raise ValueError("{0}: No such file.".format(path))

		tree = ET.parse(path)
		root = tree.getroot()

		self.include_files(root, path)

		self.load_var_from_root(root)

		self.get_script(dir)

		return root	

	def __init__(self, filename):
		pass
class Data:
	pass

class Config(Files):
	def __init__(self, path, master):
		self.path = path
	
		if master:
			self.master = master
		else:
			self.master = self
	
		self.root = self.get_root(path)


class Case(Config):
	
	data = Data()
	var = {}
	sources = []

	def __init__(self, path):
		self.var["DIR_SOURCE"], _ = os.path.split(path)
		self.var["DIR_BINARY"] = os.path.join(self.var["DIR_SOURCE"], 'build')
		
		Config.__init__(self, path, None)
		
		
		
		#print self.sources

	# functions
	
	def get_var(self, name):
		try:
			return var[name]
		except:
			def_name = var_def[name]
			self.var[name] = self.var[def_name]
			return self.var[name]
	

	
	def load_var(self, child):
		#print child.attrib, child.text
		
		name = child.attrib['name']
		type = child.attrib['type']
		text = child.text

		#print "load \"{0}\"".format(name)

		if type == 'string':
			self.var[name] = strip_white(text)
		elif type == 'int':
			self.var[name] = int(strip_white(text))
		elif type == 'float':
			self.var[name] = float(strip_white(text))
		elif type == 'array':
			self.var[name] = process_array(text)
		else:
			raise 0
		
		
	def load_var_from_root(self, root):
		for child in root.findall('var'):
			self.load_var(child)
		for child in root:
			self.load_var_from_root(child)

	def configure(self, lines):
		lines_configured = []
		for line in lines:
			#print line[:-1]
			matches = re.findall("@(\w+)@",line)
			for m in matches:
				if not m in self.var:
					print "no variable \"{0}\" found".format(m)
					print "required in:"
					print line[:-1]
					print "variables are:"
					list(prnt('\t' + k) for k in self.var.keys())
					raise 0
				v = self.var[m]
				line = re.sub("@" + m + "@", "{0}".format(v), line)
			lines_configured.append(line)
			#print line[:-1]
		return lines_configured
	
	
	def get_lines_configured(self, path):
		#print "configuring '{0}'".format(path)
		f = open(path,'r')
		lines = f.readlines()
		lines = self.configure(lines)
		return lines
	
	
	def run_script(self, path):
		variables = {}

		execfile(filename, variables)

		#print "executing scricpt \"{0}\"".format(filename)

		variables['func'](self)

	
	def calculate_fluid(self):
		fluid_name = self.var['FLUID_NAME']
		self.fluid = Sci.Fluids.Fluid(fluid_name)
	
	def calculate_inlet_rho(self):
		temp = self.var['INLET_TEMPERATURE']
		
		rho = self.fluid.get('density',temp)
		
		self.var['INLET_RHO'] = rho
		
	def calculate_inlet_mass_flow_rate(self):
		f = self.var['SOLAR_FLUX']
		
		t0 = self.var['INLET_TEMPERATURE']
		t1 = self.var['OUTLET_TEMPERATURE']
		
		dh = self.fluid.enthalpy_change(t0,t1)
		
		w = self.get_var('GEO_SOLAR_WIDTH')
		l = self.get_var('GEO_SOLAR_LENGTH') 
		
		m = f * w * l / dh
		
		self.var['INLET_MASS_FLOW_RATE'] = m


	def include_dir(self, dir1, dir2):
		if dir == "here":
			return  dir1
		else:
			return os.path.join(dir_mohr, dir2)
	
	def include_files(self, root, path):
		# path - path of xml file which is source of root

		#print "include files for \"{0}\"".format(path)
		
		dir1, filename1 = os.path.split(path)
		
		for child in root.findall('include'):
			#print "\t", child.tag, child.attrib
			
			type = child.attrib['type']
			dir2 = child.attrib['dir']
			
			dir3 = self.include_dir(dir1,dir2)

			if type == 'config':
				index = int(child.attrib['index'])
				
				x = "x{0:04d}".format(index)
				
				src = os.path.join(dir3, x, 'config.xml')
				
				conf = Config(src, self.master)

				self.master.config.append(conf)

			elif type == 'copy':
				filename2 = child.attrib['name']
				
				src = os.path.join(dir3, filename2)

				dest = os.path.join(self.data.dir_binary, filename2)
				
				shutil.copyfile(src, dest)

				self.sources.append(src)	
			elif type == 'script':
				try:
					filename2 = child.attrib['name']
				except:
					filename2 = 'script.py'
				
				src = os.path.join(dir3, filename2)

				self.run_script(src)
				
				self.sources.append(src)
			else:
				raise ValueError("undefined include type \"{0}\"".format(type))

			

	def script_fluent_files(self):
	
		self.calculate_fluid()
		self.calculate_inlet_rho()
		self.calculate_inlet_mass_flow_rate()
		
		# load boundary condition snippets
		
		files = []
		files_bc = []
		lines_bc = []
		
		def get_bc_path(name):
			return os.path.join(dir_scheme_source, 'Boundary', name + '.scm')
		
		for child in self.root.find('bc'):
			path = get_bc_path(child.tag)
			files_bc.append(path)
		
		# other scripts
		
		path_fluid = os.path.join(dir_scheme_source, "Fluid", self.var['FLUID_NAME'] + ".scm")
		
		files.append(dir_scheme_source + '/generic.scm')
		files.append(path_fluid)
		files.append(dir_scheme_source + '/udf.scm')
		files += files_bc
		files.append(dir_scheme_source + '/generic_solve.scm')
	
		return files
	


#############################################################################

if __name__=="__main__":

	if len(sys.argv) < 2:
		print "usage"
		sys.exit(1)

	if not os.path.isfile(sys.argv[1]):
		print "file not found"
		sys.exit(1)

	case = Case(sys.argv[1])

	sys.exit(0)


